using System.Collections.Generic;

namespace ListTask
{
    internal class ListItem<T>
    {
        private T _data;
        private ListItem<T> _next = null!;
        private ListItem<T> _randomListItemElement;

        public T Data { get => Data; set => _data = value; }
        public ListItem<T> Next = null!; // { get; set; }
        public ListItem<T> RandomListItemElement { get; }
        
        public ListItem(T data, ListItem<T> next)
        {
            Data = data;
            Next = next;
        }

        public ListItem(T data)
        {
            Data = data;
        }
        
    }
}

/*
1. Сделать классы для односвязного списка и узла списка.
Для эффективности сделайте поле для хранения длины списка.

Надо реализовать методы:
•	получение размера списка
•	получение значение первого элемента
•	получение/изменение значения по указанному индексу. 
Изменение значения по индексу пусть выдает старое значение.
•	удаление элемента по индексу, пусть выдает значение элемента
•	вставка элемента в начало
•	вставка элемента по индексу
•	удаление узла по значению, пусть выдает true, если элемент был удален
•	удаление первого элемента, пусть выдает значение элемента
•	разворот списка за линейное время
•	копирование списка

2* (Эта задача просто для ознакомления, проверяться она не будет). Есть односвязный список, каждый элемент которого хранит дополнительную ссылку на произвольный элемент списка. Эта ссылка может быть и null.
Надо создать копию этого списка, чтобы в копии эти произвольные ссылки ссылались на соответствующие элементы в копии.
Чему научитесь:
•	Понимание односвязных списков
•	Это достаточно сложно алгоритмически
•	Generic’и
*/