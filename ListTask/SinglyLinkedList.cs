namespace ListTask
{
    internal class SinglyLinkedList<T>
    {
        private ListItem<T> _head;
        private int _count;

        public ListItem<T> Head { get => _head; set => _head = value; }

        public int Count
        {
            get
            {
                for (ListItem<T> i = _head; i != null; i = i.Next)
                {

                }
            }

           
        }

        int count = 0;
        int
    // for ( ListItem<T> i = _head; i != null ; p = p.Next ) 
    //  {
    // Console.WriteLine p.Data




    public int GetCapacity()
        {
            return _count;
        }



    }
}

/*
1. Сделать классы для односвязного списка и узла списка.
Для эффективности сделайте поле для хранения длины списка.

Надо реализовать методы:
•	получение размера списка
•	получение значение первого элемента
•	получение/изменение значения по указанному индексу. 
Изменение значения по индексу пусть выдает старое значение.
•	удаление элемента по индексу, пусть выдает значение элемента
•	вставка элемента в начало
•	вставка элемента по индексу
•	удаление узла по значению, пусть выдает true, если элемент был удален
•	удаление первого элемента, пусть выдает значение элемента
•	разворот списка за линейное время
•	копирование списка

2* (Эта задача просто для ознакомления, проверяться она не будет). Есть односвязный список, каждый элемент которого хранит дополнительную ссылку на произвольный элемент списка. Эта ссылка может быть и null.
Надо создать копию этого списка, чтобы в копии эти произвольные ссылки ссылались на соответствующие элементы в копии.
Чему научитесь:
•	Понимание односвязных списков
•	Это достаточно сложно алгоритмически
•	Generic’и
*/

